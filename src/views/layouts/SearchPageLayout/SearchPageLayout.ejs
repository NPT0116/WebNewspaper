<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/css/styles.css" />
    <link rel="stylesheet" href="/css/fonts.css" />

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet" />

    <link rel="icon" href="https://png.pngtree.com/png-clipart/20231101/original/pngtree-vietnam-button-with-flag-symbol-photo-png-image_13471749.png" type="image/png" />

    <style>
      .tag {
        background-color: #f2f2f2;
        color: #000;
        border-radius: 5px;
        margin-right: 5px;
        padding: 3px 14px;
        display: flex;
        align-items: center;
      }
      .remove-tag {
        margin-left: 6px;
        cursor: pointer;
      }
      .select-box {
        position: relative;
        width: 100%; /* Ensure the select-box defines the container's width */
        max-width: 500px; /* Optional: Set a maximum width */
      }
      .options {
        position: absolute;
        top: 100%; /* Position right below the select-box */
        left: 0;
        z-index: 10;
        display: none; /* Initially hidden */
        background-color: #fff;
        border: 1px solid #ccc;
        max-height: 200px; /* Limit height */
        overflow-y: auto; /* Scroll if content overflows */
      }
      .open .options {
        display: block;
      }
      .option.active {
        color: #000;
        background-color: #f2f2f2;
        border-bottom: 1px solid #eaeaea;
      }
      .btn_submit {
        padding: 17px 24px;
        background-color: #4caf50;
        color: #ffffff;
        border: none;
        cursor: pointer;
        font-size: 16px;
      }
    </style>
    <title>Search Page</title>
  </head>
  <body>
    <div class="sticky top-0 z-50"><%- include('../partials/HeaderTitle.ejs') %> <%- include('../partials/Header.ejs', {sections: sectionTree}) %></div>
    <main><%- include(body) %></main>
    <footer><%- include('../partials/Footer.ejs', { section1: sections.slice(0, 5), section2: sections.slice(5, 10) }) %></footer>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const sectionToggle = document.getElementById('sectionToggle');
        const sectionDropdown = document.getElementById('sectionDropdown');
        const anyCheckbox = document.getElementById('section-any');
        const sectionCheckboxes = document.querySelectorAll('input[name="sections"]:not(#section-any)');

        // Show/Hide dropdown menu when toggling
        sectionToggle.addEventListener('click', () => {
          sectionDropdown.classList.toggle('hidden');
        });

        // Hide the dropdown when clicking outside of it
        document.addEventListener('click', (e) => {
          if (!sectionDropdown.contains(e.target) && e.target !== sectionToggle) {
            sectionDropdown.classList.add('hidden');
          }
        });

        // Function to handle "Any" checkbox logic
        function handleAnyCheckbox() {
          if (anyCheckbox.checked) {
            sectionCheckboxes.forEach((checkbox) => (checkbox.checked = false)); // Uncheck all other checkboxes
          } else if ([...sectionCheckboxes].every((checkbox) => !checkbox.checked)) {
            anyCheckbox.checked = true; // Re-check "Any" if no other checkboxes are selected
          }
          anyCheckbox.form.submit();
        }

        // Function to handle individual section checkboxes logic
        function handleSectionCheckbox() {
          if ([...sectionCheckboxes].some((checkbox) => checkbox.checked)) {
            anyCheckbox.checked = false; // Uncheck "Any" if any section is selected
          } else {
            anyCheckbox.checked = true; // Re-check "Any" if no other sections are selected
          }
          this.form.submit();
        }

        // Event listener for "Any" checkbox
        anyCheckbox.addEventListener('change', handleAnyCheckbox);

        // Event listener for each section checkbox
        sectionCheckboxes.forEach((checkbox) => {
          checkbox.addEventListener('change', handleSectionCheckbox);
        });

        // ----------------------------

        const customSelects = document.querySelectorAll('.custom-select');

        function updateSelectedOptions(customSelect) {
          const selectedOptions = Array.from(customSelect.querySelectorAll('.option.active'))
            .filter((option) => !customSelect.querySelector('.option.all_tags'))
            .map(function (option) {
              return {
                value: option.getAttribute('data-value'),
                text: option.textContent.trim()
              };
            });

          const selectedValues = selectedOptions.map(function (option) {
            return option.value;
          });

          customSelect.querySelector('.tags_input').value = selectedValues.join(', ');

          let tagsHTML = '';
          if (selectedOptions.length === 0) {
            tagsHTML = '<span class="placeholder">Select the tags</span>';
          } else {
            const maxTagsToShow = 2;
            let additionalTagsCount = 0;
            selectedOptions.forEach(function (option, index) {
              if (index < maxTagsToShow) {
                tagsHTML += `<span class="tag">${option.text}<span class="remove-tag" data-value="${option.value}">&times;</span></span>`;
              } else {
                additionalTagsCount++;
              }
            });
            if (additionalTagsCount > 0) {
              tagsHTML += '<span class="tag">+' + additionalTagsCount + '</span>';
            }
          }
          customSelect.querySelector('.selected-options').innerHTML = tagsHTML;
        }

        customSelects.forEach(function (customSelect) {
          const searchInput = customSelect.querySelector('.search-tags');
          const optionsContainer = customSelect.querySelector('.options');
          const noResultMessage = customSelect.querySelector('.no-result-message');
          const options = customSelect.querySelectorAll('.option');
          const allTagsOption = customSelect.querySelector('.option.all-tags');
          const clearButton = customSelect.querySelector('.clear');

          // allTagsOption.addEventListener('click', function () {
          //   const isActive = allTagsOption.classList.contains('active');
          //   options.forEach(function (option) {
          //     if (option !== allTagsOption) {
          //       option.classList.toggle('active', !isActive);
          //     }
          //   });
          //   updateSelectedOptions(customSelect);
          // });

          clearButton.addEventListener('click', function () {
            searchInput.value = '';
            options.forEach(function (option) {
              option.style.display = 'block';
            });
            noResultMessage.style.display = 'none';
          });

          searchInput.addEventListener('input', function () {
            const searchTerm = searchInput.value.toLowerCase();

            options.forEach(function (option) {
              const optionText = option.textContent.trim().toLocaleLowerCase();
              const shouldShow = optionText.includes(searchTerm);
              option.style.display = shouldShow ? 'block' : 'none';
            });

            const anyOptionsMatch = Array.from(options).some((option) => option.style.display === 'block');
            noResultMessage.style.display = anyOptionsMatch ? 'none' : 'block';

            if (searchTerm) {
              optionsContainer.classList.add('option-search-active');
            } else {
              optionsContainer.classList.remove('option-search-active');
            }
          });
        });

        customSelects.forEach(function (customSelect) {
          const options = customSelect.querySelectorAll('.option');
          options.forEach(function (option) {
            option.addEventListener('click', function () {
              option.classList.toggle('active');
              updateSelectedOptions(customSelect);
              const form = document.getElementById('search-form');
              form.submit();
            });
          });
        });

        document.addEventListener('click', function (event) {
          const removeTag = event.target.closest('.remove-tag');
          if (removeTag) {
            const customSelect = removeTag.closest('.custom-select');
            const valueToRemove = removeTag.getAttribute('data-value');
            const optionToRemove = customSelect.querySelector('.option[data-value=' + valueToRemove + ']');

            optionToRemove.classList.remove('active');
            const otherSelectedOptions = customSelect.querySelectorAll('.option.active:not(.all-tags)');
            const allTagsOption = customSelect.querySelector('.option.all-tags');

            // if (otherSelectedOptions.length === 0) {
            //   allTagsOption.classList.remove('active');
            // }
            updateSelectedOptions(customSelect);
            const form = document.getElementById('search-form');
            form.submit();
          }
        });

        const selectBoxes = document.querySelectorAll('.select-box');
        selectBoxes.forEach((selectBox) => {
          selectBox.addEventListener('click', function (event) {
            if (!event.target.closest('.tag')) {
              selectBox.parentNode.classList.toggle('open');
            }
          });
        });

        document.addEventListener('click', function (event) {
          if (!event.target.closest('.custom-select') && !event.target.classList.contains('remove-tag')) {
            customSelects.forEach((customSelect) => customSelect.classList.remove('open'));
          }
        });

        function resetCustomSelects() {
          customSelects.forEach((customSelect) => {
            customSelect.querySelectorAll('.option.active').forEach((option) => option.classList.remove('active'));

            customSelect.querySelector('.option.all-tags').classList.remove('active');
            updateSelectedOptions(customSelect);
            const form = document.getElementById('search-form');
            form.submit();
          });
        }

        updateSelectedOptions(customSelects[0]);
      });
    </script>
    <%- include('../../components/subscriptionModal/subscription.ejs') %>
  </body>
</html>
