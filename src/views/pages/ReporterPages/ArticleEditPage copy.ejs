<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Writing Article</title>
    <!-- <link rel="stylesheet" href="/css/styles.css" /> -->
    <link rel="stylesheet" href="https://cdn.ckeditor.com/ckeditor5/43.3.1/ckeditor5.css" />
    <link rel="stylesheet" href="/css/editor.css" />
    <link rel="stylesheet" href="/css/styles.css" />
  </head>
  <body>

    <div class="">
      <div class="edit-article-container">
        <div class="edit-article-wrapper">
          <form id="editor-form" method="post" action="/dashboard/reporter/write-article/<%= data._id %>/save">
            <div><%- include('Header copy') %></div>
            <div class="input-group-inline">
              <div class="relative w-1/2 mx-auto">
                <div id="tagContainer" class="flex flex-wrap w-full items-center gap-2 border border-gray-300 rounded-lg p-2 overflow-hidden">
                  <input id="searchInput" type="text" placeholder="Search..." class="px-2 py-1 outline-none w-[200px] z-20" />
                </div>
                <div id="dropdown" class="absolute z-10 left-0 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg hidden">
                  <div class="text-center text-gray-500 py-2">Loading...</div>
                </div>
              </div>
  
              <select name="sectionId" id="section" placeholder="Section" class="input-field-inline">
                <% data.sections && data.sections.forEach(function(section) { %>
                  <% if (data.sectionId?.toString() === section._id?.toString()) { %>
                    <option value="<%= section._id %>" selected><%= section.name %></option>
                  <% } else { %>
                    <option value="<%= section._id %>"><%= section.name %></option>
                  <% } %>
                <% }); %>
              </select>
              <input type="hidden" name="content" id="editor-content" />
              <input type="hidden" name="tags" id="tags">
              <button id="save-button" type="submit" class="save-button-inline">Save</button>
              <a class="save-button-inline" href="/dashboard/reporter/<%= data._id %>/submit">Submit</a>
            </form>
              <a class="preview-button-inline" href="/dashboard/<%= data._id %>/preview" target="_blank">
                Preview
              </a>
          </div>
        </div>
      </div>

      <div class="no-tailwindcss-base" style="display: flex; justify-content: center">
        <div class="main-container" style="width: 96%">
          <div class="editor-container editor-container_classic-editor" id="editor-container">
            <div class="editor-container__editor"><div id="editor"><%- data.content %></div></div>
          </div>
        </div>
      </div>
    </div>
    <script type="importmap">
      {
        "imports": {
          "ckeditor5": "https://cdn.ckeditor.com/ckeditor5/43.3.1/ckeditor5.js",
          "ckeditor5/": "https://cdn.ckeditor.com/ckeditor5/43.3.1/"
        }
      }
    </script>
    <script></script>
    <script type="module" src="/js/editor.js"></script>
    <script>
      const data1 = <%- JSON.stringify(data) %>;
      console.log(data1);
      const searchInput = document.getElementById('searchInput');
      const dropdown = document.getElementById('dropdown');

      let debounceTimeout;

      // Debounce function to delay search
      function debounce(func, delay) {
        return function (...args) {
          clearTimeout(debounceTimeout);
          debounceTimeout = setTimeout(() => func(...args), delay);
        };
      }

      let results;

      // Simulate search API request
      async function fetchSearchResults(query) {
        dropdown.classList.remove('hidden'); // Show dropdown
        dropdown.innerHTML = `
      <div role="status" class="flex justify-center p-4">
          <svg aria-hidden="true" class="w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
              <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
          </svg>
          
      </div>
      `; // Show loading text

        try {
          // Simulate server delay
          await new Promise((resolve) => setTimeout(resolve, 500));
          console.log(query);
          const params = new URLSearchParams({
            search_value: query
          });
          const response = await fetch(`/api/tags?search_value=${query}`);
          const jsonResponse = await response.json();
          results = jsonResponse.data.tags;
          renderDropdown(results);
        } catch (error) {
          console.error('Search error:', error);
          dropdown.innerHTML = '<div class="text-center text-gray-500 py-2 z-10">Error loading results</div>';
        }
      }

      let tags = data1.tags;

      function addTag(tag) {
        if (!tags.some((_tag) => _tag._id === tag._id)) {
          tags.push(tag);
          updateTags();
        }
      }

      function removeTag(tag) {
        tags = tags.filter((_tag) => _tag._id !== tag._id);
        updateTags();
      }

      // Update the input field with selected tags
      function updateTags() {
        const tagContainer = document.getElementById('tagContainer');
        const tagWrappers = document.getElementsByClassName('tag-wrapper');
        const tagsInput = document.getElementById('tags');
        Array.from(tagWrappers).forEach((wrapper) => tagContainer.removeChild(wrapper));
        tags.forEach((tag) => {
          console.log(tag);
          const ele = document.createElement('span');
          ele.classList.add('tag-wrapper');
          ele.innerHTML = `<span class="rounded-md bg-gray-300 text-black px-2 py-1 flex gap-2">${tag.name} 
          <div class="cursor-pointer tag" data='${JSON.stringify(tag)}'>x</div>
          </span>`;
          // Insert at the beginning of the container
          tagContainer.insertBefore(ele, tagContainer.firstChild);
          tagsInput.value = tags.map((tag) => tag._id.toString()).join(',');

          console.log(tagsInput.value);
        });
        const tagElements = document.getElementsByClassName('tag');
        Array.from(tagElements).forEach((tag) => {
          tag.addEventListener('click', (e) => {
            const data = e.currentTarget.getAttribute('data');
            console.log(data);
            removeTag(JSON.parse(data)); // Call the function to remove the tag
          });
        });
        renderDropdown(results);
      }

      document.addEventListener("DOMContentLoaded", function () {
        updateTags();
      })

      // Render dropdown with search results
      function renderDropdown(results) {
        if (!results.length) {
          dropdown.innerHTML = '<div class="text-center text-gray-500 py-2 z-10">No results found</div>';
        } else {
          const resultItems = results
            .map((result) => {
              if (!tags.some((tag) => tag._id === result._id)) return `<div data-result='${JSON.stringify(result)}' class="px-4 py-2 hover:bg-gray-100 cursor-pointer z-10">${result.name}</div>`;
              return `<div data-result='${JSON.stringify(result)}' class="px-4 py-2 bg-blue-200 hover:bg-blue-300 cursor-pointer z-10">${result.name}</div>`;
            })
            .join('');
          dropdown.innerHTML = resultItems;
          const dropdownItems = dropdown.querySelectorAll('[data-result]');
          dropdownItems.forEach((item) => {
            item.addEventListener('click', (e) => {
              const result = JSON.parse(e.currentTarget.getAttribute('data-result'));
              if (!tags.some((tag) => tag._id === result._id)) addTag(result);
              else removeTag(result);
            });
          });
        }
      }

      // Listen to input events with debounce
      searchInput.addEventListener(
        'input',
        debounce((event) => {
          const query = event.target.value.trim();

          if (query.length) {
            fetchSearchResults(query);
          } else {
            dropdown.classList.add('hidden');
          }
        }, 500) // Adjust debounce delay here
      );
      searchInput.addEventListener('focus', () => {
        dropdown.classList.remove('hidden');
        // positionDropdown();
      });
      document.getElementById('tagContainer').addEventListener('click', () => searchInput.focus());
      document.addEventListener('click', (e) => {
        if (!e.target.closest('.relative')) {
          dropdown.classList.add('hidden');
        }
      });
</script>
    <script type="module">
      import {editorInstance} from '/js/editor.js'
      console.log(editorInstance);
    </script>
  </body>
</html>
