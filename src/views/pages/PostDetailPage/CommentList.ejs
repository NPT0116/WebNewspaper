<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <div class="border p-5 rounded-lg">
      <h1 class="text-2xl font-bold">Comments (<%=comments.length%>)</h1>
      <div class="mt-8 w-full">
        <div class="flex flex-col space-y-2">
          <label for="message" class="text-gray-700 font-medium">Your Message</label>
          <form id="comment-form" action="/section/<%= sectionSlug %>/article/<%= articleSlug %>/save-comment" method="POST" class="w-full">
            <textarea
              id="message"
              name="content"
              placeholder="Write something..."
              rows="4"
              required
              class="px-4 py-2 overflow-y-hidden bg-gray-100 border border-gray-300 rounded-lg shadow-sm resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 ease-in-out auto-expand"
            ></textarea>
            <div class="flex justify-between">
              <small id="text-count" class="text-gray-500"></small>
              <button type="submit" class="rounded-lg bg-blue-400 px-4 py-2 text-white font-bold hover:bg-blue-500 hover:shadow-lg transition-all duration-200">Submit your comment</button>
            </div>
          </form>
        </div>
        <%comments.forEach((comment) => {%>
        <div class="mb-8 w-full"><%- include('../../components/Comment/Comment', {comment: comment}) %></div>
        <%})%>
      </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const articleSlug = '<%= articleSlug %>';
      const socket = io();

      // Tham gia phòng của bài viết
      socket.emit('joinArticleRoom', articleSlug);
      socket.on('newComment', (comment) => {
        console.log('Received new comment:', comment); // Debug

        // Find the comment input block
        const commentInputBlock = document.querySelector('.flex.flex-col.space-y-2');
        if (commentInputBlock) {
          // Create the new comment HTML
          const newCommentHTML = `
      <div class="mb-8 w-full">
        <div class="flex flex-row w-full shadow-lg rounded-lg p-2 cursor-pointer hover:bg-gray-100">
          <div class="rounded-full w-12 h-12">
            <img class="h-full object-cover" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSAXKkELt_XuteDLQY_HKcilbvgT3LDOm5WkQ&s" alt="Profile" />
          </div>
          <div class="ml-4 w-full">
            <div class="font-bold text-sm font-sans hover:text-red-500 transition-colors duration-300 hover:scale-105 transform">
              ${comment.account?.name || 'Unknown commenter'}
            </div>
            <div class="mt-4 w-full font-serif">${comment.content || 'No content'}</div>
          </div>
        </div>
      </div>
    `;

          // Insert the new comment directly after the input block
          commentInputBlock.insertAdjacentHTML('afterend', newCommentHTML);
        } else {
          console.error('Comment input block not found');
        }
      });

      /* eslint-disable no-undef */
      const textCount = document.getElementById('text-count');
      textCount.innerHTML = `0 / 500 words`;
      document.addEventListener('input', (event) => {
        if (event.target.classList.contains('auto-expand')) {
          const textarea = event.target;
          textarea.style.height = 'auto'; // Reset height to calculate correctly
          textarea.style.height = `${textarea.scrollHeight}px`; // Set height based on content
        }
      });

      const message = document.getElementById('message');
      message.addEventListener('input', (event) => {
        const value = event.target.value;
        const textCount = document.getElementById('text-count');
        textCount.innerHTML = `${value.length} / 500 words`;
      });
      // Kết nối Socket.IO

      // Lắng nghe sự kiện newComment
      // Xử lý gửi form bằng AJAX
      const commentForm = document.getElementById('comment-form');
      commentForm.addEventListener('submit', async (event) => {
        event.preventDefault(); // Ngăn chặn reload trang

        const content = document.getElementById('message').value;
        const formAction = commentForm.getAttribute('action');

        try {
          const response = await fetch(formAction, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content })
          });

          if (response.ok) {
            const newComment = await response.json(); // Nhận comment mới từ server
            socket.emit('addComment', newComment); // Phát tới server
            document.getElementById('message').value = ''; // Reset form
          } else {
            console.error('Failed to post comment:', response.statusText);
          }
        } catch (error) {
          console.error('Error posting comment:', error);
        }
      });
    </script>

    <!-- Kết nối Socket.IO -->
    <!-- <script src="/js/comment.js"></script> -->
  </body>
</html>
