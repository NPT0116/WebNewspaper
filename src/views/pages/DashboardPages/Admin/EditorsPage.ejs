<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <style>
    /* Start styling table */
    th.sorting_asc,
    th.sorting_desc {
      color: white !important; /* Màu chữ khi được chọn */
    }

    th {
      background-color: #212529;
      color: white;
    }
    .input {
      color: #333;
      font:
        1em/1.5 Hind,
        sans-serif;
    }
    #example {
      table-layout: fixed;
      width: 100%;
    }
    /* End styling table */
    th#id {
      text-align: center;
    }
    th#gender {
      text-align: center;
    }
    /* Start button styling */
    .button {
      position: relative;
      width: 170px;
      height: 40px;
      cursor: pointer;
      display: flex;
      align-items: center;
      border: 1px solid #34974d;
      background-color: #3ec27c;
    }

    .button,
    .button__icon,
    .button__text {
      transition: all 0.3s;
    }

    .button .button__text {
      transform: translateX(10px);
      padding: 0 10px;
      color: #fff;
      font-weight: 600;
    }

    .button .button__icon {
      position: absolute;
      transform: translateX(130px);
      height: 100%;
      width: 39px;
      background-color: #12a155;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .button .svg {
      width: 30px;
      stroke: #fff;
    }

    .button:hover {
      background: #12a155;
    }

    .button:hover .button__text {
      color: transparent;
    }

    .button:hover .button__icon {
      width: 148px;
      transform: translateX(10px);
    }

    .button:active .button__icon {
      background-color: #12a155;
    }

    .button:active {
      border: 1px solid #12a155;
    }
    /* End button styling */
    /* Start button edit1 styling */
    .buttonEdit1 {
      --color: #249aff;
      font-family: inherit;

      width: 100px;
      height: 2.6em;
      line-height: 2.5em;
      margin: 20px 0;
      margin-right: 20px;
      position: relative;
      cursor: pointer;
      overflow: hidden;
      border: 2px solid var(--color);
      transition: color 0.5s;
      z-index: 1;
      font-size: 17px;
      border-radius: 6px;
      font-weight: 500;
      color: var(--color);
    }

    .buttonEdit1:before {
      content: '';
      position: absolute;
      z-index: -1;
      background: var(--color);
      height: 150px;
      width: 200px;
      border-radius: 50%;
    }

    .buttonEdit1:hover {
      color: #fff;
    }

    .buttonEdit1:before {
      top: 100%;
      left: 100%;
      transition: all 0.7s;
    }

    .buttonEdit1:hover:before {
      top: -30px;
      left: -30px;
    }

    .buttonEdit1:active:before {
      background: #249aff;
      transition: background 0s;
    }
    /* End button edit1 */
  </style>
  <body>
    <%-include('../../../components/Dashboard/introScreen.ejs')%>
    <h1 class="text-[40px] font-bold font-serif">Editor</h1>
    <button type="button" class="button mt-4" data-modal-target="crud-modal" data-modal-toggle="crud-modal">
      <span class="button__text">Add Reporter</span>
      <span class="button__icon"
        ><svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          viewBox="0 0 24 24"
          stroke-width="2"
          stroke-linejoin="round"
          stroke-linecap="round"
          stroke="currentColor"
          height="24"
          fill="none"
          class="svg"
        >
          <line y2="19" y1="5" x2="12" x1="12"></line>
          <line y2="12" y1="12" x2="19" x1="5"></line>
        </svg>
      </span>
    </button>

    <%- include('AddEditorModal') %>
    <table id="example" class="display">
      <thead>
        <tr>
          <th id="id">Editor ID</th>
          <th>Username</th>
          <th>Email</th>
          <th>Name</th>
          <th>Date of birth</th>
          <th id="gender">Gender</th>
          <th>Section</th>
          <th>Actions</th>
          <!-- New Actions Column -->
        </tr>
      </thead>
      <tbody>
        <!-- Table rows will be populated here by DataTables -->
      </tbody>
    </table>
    <%- include('EditorInfoDrawer') %>
    <script src="/js/time.js"></script>
    <script type="text/javascript">
      const data = <%- JSON.stringify(data) %>;
      const editors = data.editors;
      console.log(editors.filter(editor => editor.isSubscriber));

      const table = $(document).ready(function () {
        $('#example').DataTable({
          data: editors,
          columns: [
            { data: '_id' },
            { data: 'accountId.localAuth.username' },
            {data: 'accountId.email'},
            { data: 'name'},
            {data: 'dob'},
            {data: 'gender'},
            {data: 'sectionId.name'},
            {
              // Actions column
              data: null, // `null` because this column doesn't map to any field in the data source
              render: function (data, type, row) {
                // Customize the action buttons for each row
                return `
                      <div class="flex space-x-2 items-center">
                        <button onclick="toggleDrawer('${row._id}')" data-user-id="${row._id}" class="show-user-info buttonEdit1  gap-2  px-4 py-2  inline-flex items-center me-2 ">
                              <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 512 512"><!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/>
                              </svg>
                              <span>Info</span>
                        </button>
                          <form id="delete-form-${row._id}" method="POST" action="/dashboard/admin/reporters/delete">
                          <button
                              type="button"
                              onclick="confirmDelete('${row._id}')"
                              class="delete-btn text-white gap-2 bg-red-500 hover:bg-red-600 px-3 py-3 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                            >
                              <svg width="20px" height="20px" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
                                <!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
                                <path
                                  d="M290.7 57.4L57.4 290.7c-25 25-25 65.5 0 90.5l80 80c12 12 28.3 18.7 45.3 18.7L288 480l9.4 0L512 480c17.7 0 32-14.3 32-32s-14.3-32-32-32l-124.1 0L518.6 285.3c25-25 25-65.5 0-90.5L381.3 57.4c-25-25-65.5-25-90.5 0zM297.4 416l-9.4 0-105.4 0-80-80L227.3 211.3 364.7 348.7 297.4 416z"
                                />
                              </svg>
                              <span>Delete</span>
                            </button>
                        </form>
                      </div>
                  `;
              },
              orderable: false, // Prevent ordering on the actions column
              searchable: false // Prevent searching on the actions column
            }
          ],
          columnDefs: [
            {
              targets: 0, // (_id)
              render: function (data, type, row, meta) {
                return `<div class="text-sm text-[#0082FF] px-4 py-2 font-mono text-center">
                  <div>${data}</div>
                </div>`;
              }
            },
            {
              targets: 1, // accountId.localAuth.username
              createdCell: function (td, cellData, rowData, row, col) {
                $(td).addClass('text-sm text-gray-600 px-4 py-2');
              }
            },
            {
              targets: 2, // accountId.localAuth.username
              render: function (data, type, row, meta) {
                  return `<div class="flex gap-2">
                  ${data}
                </div>`;
              },
            },
            {
              targets: 3, // name
              render: function (data, type, row, meta) {
                return `<div class="font-bold font-serif text-[16px]">${data}</div>`;
              }
            },
            {
              targets: 4, //dob
              render: function(data, type, row, meta) {
                return `<div>${formatDateTime(data, true)}</div>`

              }
            },
            {
              targets: 5, // gender
              render: function(data, type, row, meta) {
                return `<div class="text-center">${data}</div>`

              }
            },
            {
              targets: 6, // dob
              render: function(data, type, row, meta) {
                return `<div>${data}</div>`
              }
            },
            {
                targets: 7, // gender
                render: function(data, type, row, meta) {
                  return `<div>${data}</div>`
                }
            },
          ],
          rowCallback: function (row, data, index) {
            // Apply styling to the entire row if necessary
            $(row).addClass('bg-white hover:bg-gray-100'); // Hover effect
            if (data.status === 'Failed') {
              $(row).addClass('bg-red-100'); // Add red background for rows with "Failed" status
            }
          },
          drawCallback: function (settings) {
            // Optional: Apply styles to pagination buttons
          },
          language: {
            search: 'Search reporters:',
            searchPlaceholder: "Type to search..."
          },
          lengthChange: false,
          pageLength: 10 // Default page size
        });
      });
    </script>
    <script>
      const confirmDelete = (id) => {
        Swal.fire({
          title: 'Are you sure to delete this reporter?',
          text: 'This action cannot be undone.',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, delete it!',
          cancelButtonText: 'Cancel',
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33'
        }).then((result) => {
          if (result.isConfirmed) {
            // Find the form by ID and submit it
            const form = document.getElementById(`delete-form-${id}`);
            if (form) form.submit();
          }
        });
      };
    </script>
    <script type="text/javascript">
      function toggleDrawer(id) {
        const $targetEl = document.getElementById('user-info-drawer');

        if (!$targetEl) {
          console.error('Drawer target element not found!');
        }

        const options = {
          placement: 'right',
          backdrop: true,
          bodyScrolling: false,
          edge: false,
          onHide: () => console.log('Drawer is hidden'),
          onShow: () => console.log('Drawer is shown'),
          onToggle: () => console.log('Drawer has been toggled')
        };

        const drawer = new Drawer($targetEl, options);
        const editor = editors.find((u) => u._id == id);
        document.getElementById('name-input').value = editor.name;
        const formattedDate = dayjs(editor.dob).format('MM-DD-YYYY');
        document.getElementById('dob-input').value = formattedDate;
        document.getElementById('username-input').value = editor?.accountId?.localAuth?.username ?? '';
        document.getElementById('email-input').value = editor?.accountId?.email ?? '';
        document.getElementById('editorId-input').value = editor?._id;
        drawer.toggle();
      }

      window.toggleDrawer = toggleDrawer;
    </script>

    <script>
      const sectionInput = document.getElementById('section-input');
      sections.forEach((section) => {
        console.log(section);
        const option = document.createElement('option');
        option.value = section._id;
        option.textContent = section.name;
        sectionInput.appendChild(option);
      });
    </script>
  </body>
</html>
