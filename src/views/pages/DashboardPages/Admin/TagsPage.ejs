<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <button
      data-modal-target="crud-modal"
      data-modal-toggle="crud-modal"
      class="relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-purple-600 to-blue-500 group-hover:from-purple-600 group-hover:to-blue-500 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800"
    >
      <span class="flex gap-2 relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0">
        <svg class="w-5 h-5" fill="'currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
          <!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
          <path
            d="M0 80L0 229.5c0 17 6.7 33.3 18.7 45.3l176 176c25 25 65.5 25 90.5 0L418.7 317.3c25-25 25-65.5 0-90.5l-176-176c-12-12-28.3-18.7-45.3-18.7L48 32C21.5 32 0 53.5 0 80zm112 32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"
          />
        </svg>
        Create new tags
      </span>
    </button>

    <%- include('CreateTagForm') %>

    <table id="example" class="display">
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Slug</th>
          <th>Description</th>
          <th>Created At</th>
          <th>Published At</th>
          <th>Actions</th>
          <!-- New Actions Column -->
        </tr>
      </thead>
      <tbody>
        <!-- Table rows will be populated here by DataTables -->
      </tbody>
    </table>
    <script src="/js/time.js"></script>
    <script type="text/javascript">
      const data = <%- JSON.stringify(data) %>;
      const tags = data.tags;

      const table = $(document).ready(function () {
        $('#example').DataTable({
          data: tags,
          columns: [
            { data: '_id' },
            { data: 'name' },
            { data: 'slug' },
            { data: 'description' },
            {
              data: 'createdAt'
            },
            {
              data: 'updatedAt'
            },
            {
              // Actions column
              data: null, // `null` because this column doesn't map to any field in the data source
              render: function (data, type, row) {
                // Customize the action buttons for each row
                const body = `<svg width="20px" height="20px" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
                                <!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
                                <path
                                  d="M290.7 57.4L57.4 290.7c-25 25-25 65.5 0 90.5l80 80c12 12 28.3 18.7 45.3 18.7L288 480l9.4 0L512 480c17.7 0 32-14.3 32-32s-14.3-32-32-32l-124.1 0L518.6 285.3c25-25 25-65.5 0-90.5L381.3 57.4c-25-25-65.5-25-90.5 0zM297.4 416l-9.4 0-105.4 0-80-80L227.3 211.3 364.7 348.7 297.4 416z"
                                />
                              </svg>
                              <span>Delete</span>`
                const canDelete = row.deleteActivate;
                const deleteButton = canDelete ? `<button type='button' onclick="confirmDelete('${row._id}', 'Are you sure to delete this tag?')" class="delete-btn text-white gap-2 bg-red-500 hover:bg-red-600 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    ${body}
                  </button>
                ` : `<button type='button' disabled class="delete-btn text-white gap-2 bg-red-500 hover:bg-red-600 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 disabled:cursor-not-allowed disabled:bg-red-300">
                    ${body}
                  </button>`
                return `
                      <div class="flex space-x-2">
                          <form id="delete-form-${row._id}" method="POST" action="/dashboard/admin/tags/delete-tag/${row._id}">
                          ${deleteButton}
                        </form>
                      </div>

                  `;
              },
              orderable: false, // Prevent ordering on the actions column
              searchable: false // Prevent searching on the actions column
            }
          ],
          columnDefs: [
            {
              targets: 0, // (_id)
              render: function (data, type, row, meta) {
                return `<div class="text-sm flex gap-2 px-4">
                  <div>${data}</div>
                </div>`;
              }
            },
            {
              targets: 1, // name
              createdCell: function (td, cellData, rowData, row, col) {
                $(td).addClass('text-sm text-gray-600 px-4 py-2');
              }
            },
            {
              targets: 2, // gender
              render: function (data, type, row, meta) {
                  return `<div class="flex gap-2">
                  ${data}
                </div>`;
              },
            },
            {
              targets: 3, // dob
              render: function (data, type, row, meta) {
                return `<div class="text-xs">${data}</div>`;
              }
            },
            {
              targets: 4, // description
              render: function (data, type, row, meta) {
                return `<div class="text-xs">${formatDateTime(data)}</div>`;
              }
            },
            {
              targets: 5, // updatedAt
              render: function (data, type, row, meta) {
                return `<div class="text-xs">${formatDateTime(data)}</div>`;
              }
            },

          ],
          rowCallback: function (row, data, index) {
            // Apply styling to the entire row if necessary
            $(row).addClass('bg-white hover:bg-gray-100'); // Hover effect
            if (data.status === 'Failed') {
              $(row).addClass('bg-red-100'); // Add red background for rows with "Failed" status
            }
          },
          drawCallback: function (settings) {
            // Optional: Apply styles to pagination buttons
          },
          language: {
            // Custom language settings (optional)
            search: 'Search editors:',
            lengthMenu: 'Show _MENU_ entries per page'
          },
          pageLength: 10, // Default page size
          lengthMenu: [10, 25, 50] // Options for page size selection
        });
      });
    </script>
    <script src="/js/swal.js"></script>
  </body>
</html>
