<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <style>
    /* Start styling table */
    th.sorting_asc,
    th.sorting_desc {
      color: white !important; /* Màu chữ khi được chọn */
    }

    th {
      background-color: #212529;
      color: white;
    }
    .input {
      color: #333;
      font:
        1em/1.5 Hind,
        sans-serif;
    }
    #example {
      table-layout: fixed;
      width: 100%; /* Hoặc một giá trị cụ thể */
    }
    /* End styling table */
    th#id {
      text-align: center !important;
    }
    /* Start button styling */
    .button {
      position: relative;
      width: 175px;
      height: 40px;
      cursor: pointer;
      display: flex;
      align-items: center;
      border: 1px solid #34974d;
      background-color: #3ec27c;
    }

    .button,
    .button__icon,
    .button__text {
      transition: all 0.3s;
    }

    .button .button__text {
      transform: translateX(5px);
      padding: 0 10px;
      color: #fff;
      font-weight: 600;
    }

    .button .button__icon {
      position: absolute;
      transform: translateX(135px);
      height: 100%;
      width: 39px;
      background-color: #12a155;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .button .svg {
      width: 30px;
      stroke: #fff;
    }

    .button:hover {
      background: #12a155;
    }

    .button:hover .button__text {
      color: transparent;
    }

    .button:hover .button__icon {
      width: 148px;
      transform: translateX(15px);
    }

    .button:active .button__icon {
      background-color: #12a155;
    }

    .button:active {
      border: 1px solid #12a155;
    }
    /* End button styling */
  </style>
  <body>
    <%-include('../../../components/Dashboard/introScreen.ejs')%>
    <%- include('../../../components/Dashboard/deleteConfirmModal.ejs', {item: "tag"}) %>
    <div class="flex justify-between">
      <h1 class="text-[40px] font-bold font-serif">Tag List</h1>
    </div>
    <button type="button" class="button mt-4" data-modal-target="crud-modal" data-modal-toggle="crud-modal">
      <span class="button__text">Create new tag</span>
      <span class="button__icon">
        <svg class="w-5 h-5" fill="white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
          <!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
          <path
            d="M0 80L0 229.5c0 17 6.7 33.3 18.7 45.3l176 176c25 25 65.5 25 90.5 0L418.7 317.3c25-25 25-65.5 0-90.5l-176-176c-12-12-28.3-18.7-45.3-18.7L48 32C21.5 32 0 53.5 0 80zm112 32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"
          />
        </svg>
      </span>
    </button>

    <%- include('CreateTagForm') %>
    <%- include('TagInfoDrawer') %>

    <table id="example" class="display">
      <thead>
        <tr>
          <th id="id">ID</th>
          <th>Name</th>
          <th>Slug</th>
          <th>Description</th>
          <th>Created At</th>
          <th>Published At</th>
          <th>Actions</th>
          <!-- New Actions Column -->
        </tr>
      </thead>
      <tbody>
        <!-- Table rows will be populated here by DataTables -->
      </tbody>
    </table>
    <script src="/js/time.js"></script>
    <script type="text/javascript">
      const data = <%- JSON.stringify(data) %>;
      const tags = data.tags;

      const table = $(document).ready(function () {
        $('#example').DataTable({
          data: tags,
          columns: [
            { data: '_id' },
            { data: 'name' },
            { data: 'slug' },
            { data: 'description' },
            {
              data: 'createdAt'
            },
            {
              data: 'updatedAt'
            },
            {
              // Actions column
              data: null, // `null` because this column doesn't map to any field in the data source
              render: function (data, type, row) {
                // Customize the action buttons for each row
                const body = `<svg width="20px" height="20px" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
                                <!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
                                <path
                                  d="M290.7 57.4L57.4 290.7c-25 25-25 65.5 0 90.5l80 80c12 12 28.3 18.7 45.3 18.7L288 480l9.4 0L512 480c17.7 0 32-14.3 32-32s-14.3-32-32-32l-124.1 0L518.6 285.3c25-25 25-65.5 0-90.5L381.3 57.4c-25-25-65.5-25-90.5 0zM297.4 416l-9.4 0-105.4 0-80-80L227.3 211.3 364.7 348.7 297.4 416z"
                                />
                              </svg>
                              <span>Delete</span>`
                const canDelete = row.deleteActivate;
                const deleteButton = canDelete ? `<button type='button' onclick="confirmDelete('${row._id}', 'Are you sure to delete this tag?')" class="delete-btn w-[93px] text-white gap-2 bg-red-500 hover:bg-red-600 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    ${body}
                  </button>
                ` : `<button type='button' disabled class="delete-btn text-white w-[93px] gap-2 bg-red-500 hover:bg-red-600 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 disabled:cursor-not-allowed disabled:bg-red-300">
                    ${body}
                  </button>`
                const editButton = `
                  <button
                    onclick="toggleEditDrawer('${row._id}')"
                    type="button"
                    class="w-[93px] edit-btn text-white gap-2 bg-green-500 hover:bg-green-600 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-start me-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                  >
                    <svg width="20px" height="20px" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                      <!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
                      <path
                        d="M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.2-2.7 15.7-7.4 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160L0 416c0 53 43 96 96 96l256 0c53 0 96-43 96-96l0-96c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 96c0 17.7-14.3 32-32 32L96 448c-17.7 0-32-14.3-32-32l0-256c0-17.7 14.3-32 32-32l96 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L96 64z"
                      />
                    </svg>
                    <span>Edit</span>
                  </button>
                `;
                return `
                      <div class="flex space-x-2">
                          <form id="delete-form-${row._id}" method="POST" action="/dashboard/admin/tags/delete-tag/${row._id}">
                          ${deleteButton}
                        </form>
                        ${editButton}
                      </div>

                  `;
              },
              orderable: false, // Prevent ordering on the actions column
              searchable: false // Prevent searching on the actions column
            }
          ],
          columnDefs: [
            {
              targets: 0, // (_id)
              render: function (data, type, row, meta) {
                return `<div class="text-sm text-[#0082FF] px-4 py-2 font-mono text-center">
                  <div>${data}</div>
                </div>`;
              }
            },
            {
              targets: 1, // name
              createdCell: function (td, cellData, rowData, row, col) {
                $(td).addClass('font-bold font-serif text-[20px]');
              }
            },
            {
              targets: 2, //slug
              render: function (data, type, row, meta) {
                  return `<div class="flex gap-2 italic">
                  /${data}/
                </div>`;
              },
            },
            {
              targets: 3, // dob
              render: function (data, type, row, meta) {
                return `<div class="text-[14px]">${data}</div>`;
              }
            },
            {
              targets: 4, // description
              render: function (data, type, row, meta) {
                return `<div class="text-xs">${formatDateTime(data)}</div>`;
              }
            },
            {
              targets: 5, // updatedAt
              render: function (data, type, row, meta) {
                return `<div class="text-xs">${formatDateTime(data)}</div>`;
              }
            },

          ],
          rowCallback: function (row, data, index) {
            // Apply styling to the entire row if necessary
            $(row).addClass('bg-white hover:bg-gray-100'); // Hover effect
            if (data.status === 'Failed') {
              $(row).addClass('bg-red-100'); // Add red background for rows with "Failed" status
            }
          },
          drawCallback: function (settings) {
            // Optional: Apply styles to pagination buttons
          },
          language: {
            search: 'Search articles:',
            searchPlaceholder: 'Type to search...'
          },
          lengthChange: false,
          pageLength: 10 // Default page size
        });
      });
    </script>
    <!-- <script src="/js/swal.js"></script> -->
    <script src="/js/drawer.js"></script>
    <script>
      function toggleEditDrawer(id) {
        const tag = tags.find((tag) => tag._id === id);
        console.log(tag);
        document.getElementById('_id-input').value = tag._id;
        document.getElementById('name-input').value = tag.name;
        document.getElementById('description-input').value = tag.description;
        toggleDrawer('tag-info-drawer');
      }
    </script>
    <script>
      function confirmDelete(id) {
        const modal = document.getElementById('confirmModal');
        const modalItem = document.getElementById('confirmItem');
        const cancelButton = document.getElementById('cancelButton');
        const confirmButton = document.getElementById('confirmButton');

        // Hiển thị modal và modalItem
        modal.classList.remove('hidden'); // Hiển thị modal nền
        modalItem.classList.add('modal'); // Thêm trạng thái mặc định cho modalItem
        setTimeout(() => {
          modalItem.classList.add('modal-active'); // Kích hoạt hiệu ứng thu nhỏ/phóng to trên modalItem
        }, 0);

        // Xử lý nút hủy
        cancelButton.addEventListener('click', () => {
          modalItem.classList.remove('modal-active'); // Thu nhỏ lại modalItem
          setTimeout(() => {
            modalItem.classList.remove('modal'); // Loại trạng thái mặc định
            modal.classList.add('hidden'); // Ẩn modal nền
          }, 300); // Thời gian trùng với transition
        });

        // Xử lý nút xác nhận
        confirmButton.addEventListener('click', () => {
          const form = document.getElementById(`delete-form-${id}`);
          if (form) form.submit();

          modalItem.classList.remove('modal-active'); // Thu nhỏ lại modalItem
          setTimeout(() => {
            modalItem.classList.remove('modal'); // Loại trạng thái mặc định
            modal.classList.add('hidden'); // Ẩn modal nền
          }, 300);
        });
      }
    </script>
  </body>
</html>
