<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DataTable with Server-Side Fetching</title>

    <!-- Include DataTable CSS -->

    <style>
      /* Custom Pagination Styling */
      .dataTables_wrapper .dataTables_paginate .paginate_button {
        background-color: #f3f4f6 !important;
        padding: 0.5em 0.9em !important;
      }
      .paginate_button:hover {
        background-color: #d1d5db !important;
      }
    </style>
  </head>
  <body>
    <div class="flex justify-between">
      <h1 class="text-2xl font-bold">Article List</h1>
    </div>

    <div class="flex gap-4 mb-4">
      <div class="flex gap-1"><%- include('../../../components/Dashboard/StatusFilter') %></div>
      <div class="flex flex-1 gap-2">
        <label class="flex items-center" for="searchInput">Tags:</label>
        <div class="relative flex-1 mx-auto">
          <div id="tagContainer" class="flex flex-wrap w-full items-center gap-2 border border-gray-300 rounded-lg p-2 overflow-hidden">
            <input id="searchInput" type="text" placeholder="Search..." class="px-2 py-1 outline-none w-[200px] z-20" />
          </div>
          <div id="dropdown" class="absolute z-10 left-0 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg hidden">
            <div class="text-center text-gray-500 py-2">Loading...</div>
          </div>
          <input type="hidden" name="tags" id="tags" />
        </div>
      </div>
    </div>

    <table id="example" class="display">
      <thead>
        <tr>
          <th>Title</th>
          <th>Description</th>
          <th>Status</th>
          <th>Published At</th>
          <th>Views</th>
          <th>Section</th>
          <th>Subscribe</th>
          <th>Actions</th>
          <!-- New Actions Column -->
        </tr>
      </thead>
      <tbody>
        <!-- Table rows will be populated here by DataTables -->
      </tbody>
    </table>

    <script type="text/javascript">
      // eslint-disable-next-line
      const data = <%- JSON.stringify(data) %>;
      let articles = data.articles
      const table = $(document).ready(function () {
        $('#example').DataTable({
          responsive: true,
          data: articles,
          columns: [
            { data: 'title' },
            { data: 'description' },
            { data: 'status' },
            {data: 'publishedAt'},
            { data: 'views' },
            { data: 'sectionId'},
            {data: 'isSubscribed'},
            {
              // Actions column
              data: null, // `null` because this column doesn't map to any field in the data source
              render: function (data, type, row) {
                // Customize the action buttons for each row
                console.log(row);
                return `
                      <div class="flex space-x-2">
                          <a href="/dashboard/${row._id}/preview" target="_blank" data-id="${row._id}" class="edit-btn text-white flex gap-2 bg-blue-500 hover:bg-blue-600 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-center me-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                            <svg width="20px" height="20px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM144 256a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm144-64c0 35.3-28.7 64-64 64c-7.1 0-13.9-1.2-20.3-3.3c-5.5-1.8-11.9 1.6-11.7 7.4c.3 6.9 1.3 13.8 3.2 20.7c13.7 51.2 66.4 81.6 117.6 67.9s81.6-66.4 67.9-117.6c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3z"/></svg>
                            <span>Preview</span>
                        </a>
                          <form id="deleteForm-${data._id}" action="/dashboard/admin/${data._id}/delete" method="POST">
                            <button
                            type="button"
                            onclick="confirmDelete('${data._id}')"
                            class="delete-btn text-white gap-2 bg-red-500 hover:bg-red-600 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                          >
                            <svg width="20px" height="20px" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
                              <!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
                              <path
                                d="M290.7 57.4L57.4 290.7c-25 25-25 65.5 0 90.5l80 80c12 12 28.3 18.7 45.3 18.7L288 480l9.4 0L512 480c17.7 0 32-14.3 32-32s-14.3-32-32-32l-124.1 0L518.6 285.3c25-25 25-65.5 0-90.5L381.3 57.4c-25-25-65.5-25-90.5 0zM297.4 416l-9.4 0-105.4 0-80-80L227.3 211.3 364.7 348.7 297.4 416z"
                              />
                            </svg>
                            <span>Delete</span>
                          </button>
                          </form>

                          ${!row.isSubscribed ? `<form id="upgradeForm-${data._id}" action="/dashboard/admin/${data._id}/subscription" method="GET">
                            <button
                            type="button"
                            onclick="confirmUpgrade('${data._id}')"
                            class="delete-btn text-white gap-2 bg-yellow-300 hover:bg-yellow-500 focus:ring-4 focus:outline-none focus:ring-yellow-300 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                          >
                            <svg class="w-5 h-5" fill='currentColor' xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"/></svg>
                            <span>Upgrade</span>
                          </button>
                          </form>`: ''}
                      </div>
                  `;
              },
              orderable: false, // Prevent ordering on the actions column
              searchable: false // Prevent searching on the actions column
            }
          ],
          columnDefs: [
            {
              // Add Tailwind class to the "title" column
              targets: 0, // 2nd column (title)
              render: function (data, type, row, meta) {
                return `<div class="flex gap-2 px-4">
                  <img class="w-10 h-10 rounded" src="${row.images[0]}" alt="Rounded avatar">
                  <div>${data}</div>
                </div>`;
              }
            },
            {
              // Add Tailwind class to the "description" column
              targets: 1, // 3rd column (description)
              createdCell: function (td, cellData, rowData, row, col) {
                $(td).addClass('text-sm text-gray-600 px-4 py-2');
              }
            },
            {
              // Add Tailwind class to the "status" column
              targets: 2, // 5th column (status)
              render: function (data, type, row, meta) {

              const getColorByStatus = (status) => {
                switch (status) {
                  case('draft'):
                    return {
                      dot: 'bg-gray-500',
                      text: 'text-gray-600'
                  }
                  case 'pending':
                    return {
                      dot: 'bg-yellow-500',
                      text: 'text-yellow-600'
                    }
                  case 'rejected':
                    return {
                      dot: 'bg-red-500',
                      text: 'text-red-600'
                  }

                  case 'published':
                  return {
                    dot: 'bg-green-500',
                    text: 'text-green-600'
                }

                }
              }
                  return `<div class="flex gap-2">
                  <div class="flex items-center"><span class="flex w-2 h-2 ${getColorByStatus(data)?.dot} rounded-full "></span></div>
                  <div class="flex items-center ${getColorByStatus(data)?.text}">${data}</div>
                </div>`;
              },
            },
            {
              // Add Tailwind class to the "publishedAt" column
              targets: 3, // 6th column (publishedAt)
              render: function (data, type, row, meta) {

                // Create a Date object
                const date = new Date(data);

                // Use toLocaleString for a readable format
                const readableDate = date.toLocaleString('en-US', {
                  weekday: 'long', // Long weekday name (e.g., "Monday")
                  year: 'numeric', // Full year (e.g., 2024)
                  month: 'long', // Full month name (e.g., "November")
                  day: 'numeric', // Day of the month (e.g., 20)
                  hour: '2-digit', // Hour in 2-digit format (e.g., "03")
                  minute: '2-digit', // Minute in 2-digit format (e.g., "22")
                  second: '2-digit', // Second in 2-digit format (e.g., "47")
                  hour12: true // 12-hour format (AM/PM)
                });

                return `<div class="text-xs">${readableDate}</div>`;
              }
            },
            {
              targets: 4,
              render: function(data, type, row, meta) {
                const safeData = data !== undefined && data !== null ? data : "N/A";
                return `<div class="flex gap-2">
                  <svg class="flex align-items-center" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 576 512"><!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM144 256a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm144-64c0 35.3-28.7 64-64 64c-7.1 0-13.9-1.2-20.3-3.3c-5.5-1.8-11.9 1.6-11.7 7.4c.3 6.9 1.3 13.8 3.2 20.7c13.7 51.2 66.4 81.6 117.6 67.9s81.6-66.4 67.9-117.6c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3z"/></svg>
                  ${safeData}
                </div>`
              }
            },
            {
              targets: 5,
              render: function(data, type, row, meta) {
                return `<div>${data?.name ? data.name : "N/A"}</div>`
              }
            },
            {
              targets: 6,
              render: function(data, type, row, meta) {
                if(data ) return `<span class="inline-flex items-center bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-red-900 dark:text-red-300">
                  <span class="w-2 h-2 me-1 bg-red-500 rounded-full"></span>
                  Premium
              </span>`

              return `<span class="inline-flex items-center bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">
                <span class="w-2 h-2 me-1 bg-green-500 rounded-full"></span>
                Public
            </span>`
              }
            }
          ],
          rowCallback: function (row, data, index) {
            // Apply styling to the entire row if necessary
            $(row).addClass('bg-white hover:bg-gray-100'); // Hover effect
            if (data.status === 'Failed') {
              $(row).addClass('bg-red-100'); // Add red background for rows with "Failed" status
            }
          },
          drawCallback: function (settings) {
            // Optional: Apply styles to pagination buttons
          },
          language: {
            // Custom language settings (optional)
            search: 'Search articles:',
            lengthMenu: 'Show _MENU_ entries per page'
          },
          pageLength: 10, // Default page size
          lengthMenu: [10, 25, 50] // Options for page size selection
        });
      });




      // Handle delete button click
      $('#example').on('click', '.delete-btn', function () {
        const id = $(this).data('id');
        console.log('Delete ID:', id);
        // Add your delete logic here
      });
    </script>
    <script>
      function confirmUpgrade(id) {
        Swal.fire({
          title: 'Are you sure to promote the tier of this article?',
          icon: 'question',
          showCancelButton: true,
          confirmButtonText: 'Yes, promote it!',
          cancelButtonText: 'Nah, cancel it!',
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33'
        }).then((result) => {
          if (result.isConfirmed) {
            // Find the form by ID and submit it
            const form = document.getElementById(`upgradeForm-${id}`);
            if (form) form.submit();
          }
        });
      }

      function confirmDelete(id) {
        Swal.fire({
          title: 'Are you sure?',
          text: 'This action cannot be undone.',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, delete it!',
          cancelButtonText: 'Cancel',
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33'
        }).then((result) => {
          if (result.isConfirmed) {
            // Find the form by ID and submit it
            const form = document.getElementById(`deleteForm-${id}`);
            if (form) form.submit();
          }
        });
      }
    </script>
    <script>
      const searchInput = document.getElementById('searchInput');
      const dropdown = document.getElementById('dropdown');

      let debounceTimeout;

      // Debounce function to delay search
      function debounce(func, delay) {
        return function (...args) {
          clearTimeout(debounceTimeout);
          debounceTimeout = setTimeout(() => func(...args), delay);
        };
      }

      let results;

      // Simulate search API request
      async function fetchSearchResults(query) {
        dropdown.classList.remove('hidden'); // Show dropdown
        dropdown.innerHTML = `
      <div role="status" class="flex justify-center p-4">
          <svg aria-hidden="true" class="w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
              <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
          </svg>

      </div>
      `; // Show loading text

        try {
          // Simulate server delay
          await new Promise((resolve) => setTimeout(resolve, 500));
          console.log(query);
          const params = new URLSearchParams({
            search_value: query
          });
          const response = await fetch(`/api/tags?search_value=${query}`);
          const jsonResponse = await response.json();
          results = jsonResponse.data.tags;
          renderDropdown(results);
        } catch (error) {
          console.error('Search error:', error);
          dropdown.innerHTML = '<div class="text-center text-gray-500 py-2 z-10">Error loading results</div>';
        }
      }

      let tags = [];

      function addTag(tag) {
        if (!tags?.some((_tag) => _tag._id === tag._id)) {
          tags?.push(tag);
          updateTags();
        }
        updateDataByTags();
      }

      function removeTag(tag) {
        tags = tags?.filter((_tag) => _tag._id !== tag._id);
        updateTags();
        updateDataByTags();
      }

      function updateDataByTags() {
        // Assuming `data` is your local array of items
        const tagIds = tags?.map((tag) => tag._id);
        articles = tagIds?.length === 0 ? data.articles : data.articles.filter((article) => article.tags?.some((tag) => tagIds.includes(tag))); // Apply the filter
        const selectedFilter = $('#statusFilter').val();
        console.log(selectedFilter);
        if (selectedFilter && selectedFilter !== 'All') articles = articles.filter((article) => article.status === selectedFilter);
        // Now, update the table with the filtered data
        _table = $('#example').DataTable();
        _table.clear();
        _table.rows.add(articles);
        _table.draw();
      }

      // Update the input field with selected tags
      function updateTags() {
        const tagContainer = document.getElementById('tagContainer');
        const tagWrappers = document.getElementsByClassName('tag-wrapper');
        const tagsInput = document.getElementById('tags');
        Array.from(tagWrappers).forEach((wrapper) => tagContainer.removeChild(wrapper));
        tags?.forEach((tag) => {
          console.log(tag);
          const ele = document.createElement('span');
          ele.classList.add('tag-wrapper');
          ele.innerHTML = `<span class="rounded-md bg-gray-300 text-black px-2 py-1 flex gap-2">${tag.name}
          <div class="cursor-pointer tag" data='${JSON.stringify(tag)}'>x</div>
          </span>`;
          // Insert at the beginning of the container
          tagContainer.insertBefore(ele, tagContainer.firstChild);
          tagsInput.value = tags.map((tag) => tag._id.toString()).join(',');

          console.log(tagsInput.value);
        });
        const tagElements = document.getElementsByClassName('tag');
        Array.from(tagElements).forEach((tag) => {
          tag.addEventListener('click', (e) => {
            const data = e.currentTarget.getAttribute('data');
            console.log(data);
            removeTag(JSON.parse(data)); // Call the function to remove the tag
          });
        });
        renderDropdown(results);
      }

      document.addEventListener('DOMContentLoaded', function () {
        updateTags();
      });

      // Render dropdown with search results
      function renderDropdown(results) {
        if (!results.length) {
          dropdown.innerHTML = '<div class="text-center text-gray-500 py-2 z-10">No results found</div>';
        } else {
          const resultItems = results
            .map((result) => {
              if (!tags?.some((tag) => tag._id === result._id)) return `<div data-result='${JSON.stringify(result)}' class="px-4 py-2 hover:bg-gray-100 cursor-pointer z-10">${result.name}</div>`;
              return `<div data-result='${JSON.stringify(result)}' class="px-4 py-2 bg-blue-200 hover:bg-blue-300 cursor-pointer z-10">${result.name}</div>`;
            })
            .join('');
          dropdown.innerHTML = resultItems;
          const dropdownItems = dropdown.querySelectorAll('[data-result]');
          dropdownItems.forEach((item) => {
            item.addEventListener('click', (e) => {
              const result = JSON.parse(e.currentTarget.getAttribute('data-result'));
              if (!tags?.some((tag) => tag._id === result._id)) addTag(result);
              else removeTag(result);
            });
          });
        }
      }

      // Listen to input events with debounce
      searchInput.addEventListener(
        'input',
        debounce((event) => {
          const query = event.target.value.trim();

          if (query.length) {
            fetchSearchResults(query);
          } else {
            dropdown.classList.add('hidden');
          }
        }, 500) // Adjust debounce delay here
      );
      searchInput.addEventListener('focus', () => {
        dropdown.classList.remove('hidden');
        // positionDropdown();
      });
      document.getElementById('tagContainer').addEventListener('click', () => searchInput.focus());
      document.addEventListener('click', (e) => {
        if (!e.target.closest('.relative')) {
          dropdown.classList.add('hidden');
        }
      });
    </script>
  </body>
</html>
