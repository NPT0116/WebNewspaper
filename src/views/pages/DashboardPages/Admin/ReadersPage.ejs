<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <table id="example" class="display">
      <thead>
        <tr>
          <th>_id</th>
          <th>Name</th>
          <th>Date of birth</th>
          <th>Reader Type</th>
          <th>Actions</th>
          <!-- New Actions Column -->
        </tr>
      </thead>
      <tbody>
        <!-- Table rows will be populated here by DataTables -->
      </tbody>
    </table>

    <%- include('ReaderInfoDrawer') %>

    <script src="/js/time.js"></script>

    <script>
          const data = <%- JSON.stringify(data) %>;
          const readers = data.readers;
          console.log(readers[15]);

          const table = $(document).ready(function () {
            $('#example').DataTable({
              data: readers,
              columns: [
                { data: '_id' },
                { data: 'name' },
                { data: 'dob' },
                {data: 'accountId'},
                {
                  // Actions column
                  data: null, // `null` because this column doesn't map to any field in the data source
                  render: function (data, type, row) {
                    // Customize the action buttons for each row
                    const isButtonDisabled = row?.accountId?.isSubscriber === true;
                    console.log(isButtonDisabled);
                    const buttonElement = isButtonDisabled ? `<button disabled data-tooltip-target="tooltip-default" class="relative flex items-center gap-2 bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-600 transition ease-in-out duration-300 disabled:bg-gray-400 disabled:cursor-not-allowed"
                    >
                 <svg class="w-5 h-5" fill='currentColor' xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                   <path d="M214.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 141.2 160 448c0 17.7 14.3 32 32 32s32-14.3 32-32l0-306.7L329.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160z"/>
                 </svg>
               Upgrade
             </button>` : `<button onclick="toggleUpgradeConfirm('${row._id}')" type="button" data-tooltip-target="tooltip-default" class="relative flex items-center gap-2 bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-600 transition ease-in-out duration-300 disabled:bg-gray-400 disabled:cursor-not-allowed"
             >
          <svg class="w-5 h-5" fill='currentColor' xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
            <path d="M214.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 141.2 160 448c0 17.7 14.3 32 32 32s32-14.3 32-32l0-306.7L329.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160z"/>
          </svg>
        Upgrade
      </button>`
                    return `
                          <div class="flex space-x-2">
                            <button onclick="toggleDrawer('${row._id}')" data-user-id="${row._id}" class="show-user-info bg-teal-500 text-white hover:bg-teal-600 focus:ring-2 focus:ring-teal-300 gap-2 rounded-lg px-4 py-2 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-center me-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 512 512"><!--!Font Awesome Free 6.7.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/>
                                </svg>
                                <span>Info</span>
                              </button>
                            <form id="upgrade-form-${row._id}" action="/dashboard/admin/readers/upgrade-reader/${row._id}" method="POST">${buttonElement}</form>
                          </div>
                      `;
                  },
                  orderable: false, // Prevent ordering on the actions column
                  searchable: false // Prevent searching on the actions column
                }
              ],
              columnDefs: [
                {
                  // Add Tailwind class to the "name" column
                  targets: 0,
                  createdCell: function (td, cellData, rowData, row, col) {
                    $(td).addClass('text-sm text-gray-600 px-4 py-2');
                  }
                },
                {
                  // Add Tailwind class to the "username" column
                  targets: 1,
                  render: function (data, type, row, meta) {
                    return `<div>${data}</div>`;
                  }
                },
                {
                  // Add Tailwind class to the "dateOfBirth" column
                  targets: 2,
                  render: function (data, type, row, meta) {

                    return `<div class="text-xs">${formatDateTime(data, true)}</div>`;
                  }
                },
                {
                  // Add Tailwind class to the "dateOfBirth" column
                  targets: 3,
                  render: function (data, type, row, meta) {
                    const isSubscriber = data?.isSubscriber === true;
                    if(isSubscriber)
                      return `<div class="text-sm flex w-fit items-center gap-2 px-4 py-2 rounded-full bg-yellow-300 text-white">
                        <svg fill="currentColor" class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
                          <path d="M309 106c11.4-7 19-19.7 19-34c0-22.1-17.9-40-40-40s-40 17.9-40 40c0 14.4 7.6 27 19 34L209.7 220.6c-9.1 18.2-32.7 23.4-48.6 10.7L72 160c5-6.7 8-15 8-24c0-22.1-17.9-40-40-40S0 113.9 0 136s17.9 40 40 40c.2 0 .5 0 .7 0L86.4 427.4c5.5 30.4 32 52.6 63 52.6l277.2 0c30.9 0 57.4-22.1 63-52.6L535.3 176c.2 0 .5 0 .7 0c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40c0 9 3 17.3 8 24l-89.1 71.3c-15.9 12.7-39.5 7.5-48.6-10.7L309 106z"/>
                        </svg>
                        <span>Subscriber</span>
                      </div>`;
                    return `<div class="text-sm flex w-fit items-center gap-2 px-4 py-2 rounded-full bg-gray-300 text-black">
                      <svg fill="currentColor" class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                        <path d="M96 128a128 128 0 1 0 256 0A128 128 0 1 0 96 128zm94.5 200.2l18.6 31L175.8 483.1l-36-146.9c-2-8.1-9.8-13.4-17.9-11.3C51.9 342.4 0 405.8 0 481.3c0 17 13.8 30.7 30.7 30.7l131.7 0c0 0 0 0 .1 0l5.5 0 112 0 5.5 0c0 0 0 0 .1 0l131.7 0c17 0 30.7-13.8 30.7-30.7c0-75.5-51.9-138.9-121.9-156.4c-8.1-2-15.9 3.3-17.9 11.3l-36 146.9L238.9 359.2l18.6-31c6.4-10.7-1.3-24.2-13.7-24.2L224 304l-19.7 0c-12.4 0-20.1 13.6-13.7 24.2z"/>
                      </svg>
                      <span>Reader</span>
                    </div>`
                  }
                },
              ],
              rowCallback: function (row, data, index) {
                // Apply styling to the entire row if necessary
                $(row).addClass('bg-white hover:bg-gray-100'); // Hover effect
                if (data.status === 'Failed') {
                  $(row).addClass('bg-red-100'); // Add red background for rows with "Failed" status
                }
              },
              drawCallback: function (settings) {
                // Optional: Apply styles to pagination buttons
              },
              language: {
                // Custom language settings (optional)
                search: 'Reader name:',
                lengthMenu: 'Show _MENU_ entries per page'
              },
              pageLength: 10, // Default page size
              lengthMenu: [10, 25, 50] // Options for page size selection
            });
          });

          $('#statusFilter').on('change', function () {
            const selectedFilter = $(this).val(); // Get the selected filter value

            // Assuming `data` is your local array of items
            const filteredData = data.articles.filter((item) => item.status === selectedFilter); // Apply the filter
            console.log(filteredData);
            // Now, update the table with the filtered data
            _table = $('#example').DataTable();
            _table.clear();
            _table.rows.add(filteredData);
            _table.draw();
          });
    </script>
    <script src="/js/time.js"></script>
    <script type="module">
      export function toggleDrawer(id) {
        const $targetEl = document.getElementById('user-info-drawer');

        if (!$targetEl) {
          console.error('Drawer target element not found!');
        }

        const options = {
          placement: 'right',
          backdrop: true,
          bodyScrolling: false,
          edge: false,
          onHide: () => console.log('Drawer is hidden'),
          onShow: () => console.log('Drawer is shown'),
          onToggle: () => console.log('Drawer has been toggled')
        };

        const drawer = new Drawer($targetEl, options);
        const reader = readers.find((u) => u._id == id);
        console.log(reader);
        document.getElementById('email-input').value = reader?.accountId?.email;
        document.getElementById('username-input').value = reader?.accountId?.localAuth?.username;
        document.getElementById('dob-input').value = formatDateTime(reader?.dob, true);
        document.getElementById('name-input').value = reader?.name;
        document.getElementById('name').textContent = reader?.name;
        document.getElementById('username').textContent = reader?.accountId?.localAuth?.username;
        const subscriptionExpiresAt = reader?.accountId?.subscriptionExpiresAt;
        const expiredDate = subscriptionExpiresAt ? dayjs(subscriptionExpiresAt).format('MM-DD-YYYY') : 'N/A';
        document.getElementById('expires-at').value = expiredDate;
        const articleList = document.getElementById('article-list');
        reader?.watchedArticles?.forEach((article) => {
          articleList.innerHTML += `
          <li class="pb-3 sm:pb-4">
            <div class="flex items-center space-x-4 rtl:space-x-reverse">
              <div class="flex-shrink-0">
                <img class="w-8 h-8 rounded-full" src="${article?.articleId?.images ? article?.articleId.images[0] : ''}" />
              </div>
              <div class="flex-1 min-w-0">
                <p class="text-sm font-medium text-gray-900 truncate dark:text-white">${article?.articleId?.title}</p>
                <p class="text-sm text-gray-500 truncate dark:text-gray-400">An in-depth exploration of Bugatti, its history, iconic models, and its impact on the automotive industry.</p>
              </div>
              <div class="inline-flex items-center text-base font-semibold text-gray-900 dark:text-white">${formatDateTime(article.viewedAt)}</div>
            </div>
          </li>`;
        });

        drawer.toggle();
      }
      window.toggleDrawer = toggleDrawer;
    </script>

    <script>
      const toggleUpgradeConfirm = (id) => {
        Swal.fire({
          title: 'Upgrade this user?',
          text: 'This action cannot be undone.',
          icon: 'info',
          showCancelButton: true,
          confirmButtonText: 'Yes',
          cancelButtonText: 'Cancel',
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33'
        }).then((result) => {
          if (result.isConfirmed) {
            // Find the form by ID and submit it
            const form = document.getElementById(`upgrade-form-${id}`);
            if (form) form.submit();
          }
        });
      };
    </script>
  </body>
</html>
